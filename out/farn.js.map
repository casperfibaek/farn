{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/core/base.js","webpack:///./lib/core/circles.js","webpack:///./lib/core/lineStrings.js","webpack:///./lib/farn.js","webpack:///./lib/core/checks.js","webpack:///./lib/operations/buffer.js","webpack:///./lib/operations/selfIntersection.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","intersect","l1","l2","dx1","dy1","dx2","dy2","denom","dx12","dy12","ua","ub","intersect3D","ls1","ls2","p1","p2","p3","p4","length","p13","p43","p43s","Math","pow","sqrt","Number","EPSILON","p21","p21s","d1343","d4321","d1321","abs","mua","mub","distanceTo","point1","point2","onLine","line","point","tolerance","arguments","undefined","dy","dx","ymin","ymax","xmin","xmax","slope","intercept","bbox","polygon","a","b","Infinity","area","total","j","angleTo","theta","atan2","PI","nearestPoint","lineSegment","c1","c2","dlx","dly","dpx","dpy","dlz","pointRotation","origin","angle","rad","cos","sin","nx","ny","angleDifference","angle1","angle2","min","pointFromAngle","distance","pointFromRatio","ratio","pointFromTwoPoints","xy","createSector","b1","b2","precision","ad","nodes","ceil","rads","cl","coords","Array","createSectorSlice","createCircle","radius","x","y","base","require","lineStringLength","lineString","ls","pointAlongLineString","Error","perpendicularPoints","lineDistance","left","shiftLines","tv","tvi","le","shiftLeft","shiftRight","rs","farn","_objectSpread","inside","xi","yi","xj","yj","pointToLine","linestring","circle","right","currentShiftLines","currLeft","currRight","push","forwardShiftLines","forwardLeft","forwardRight","leftIntersect","rightIntersect","slice","concat","unshift","shamos","globalIntersections","seg","f","sort","q","localIntersections","eq1","eq2","_ret","v","findIndex","arr","_typeof","shift"],"mappings":"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","file":"farn.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/* eslint-env node, es6 */\n\n/**\n * Find the intersection point between two lines located on the lines.\n * If the boolean is passed returns true for intersection and false for no intersection.\n * @name intersect\n * @param {Array} lineSegment1 A nested Array containing x, y and potentially z coordinates.\n * The z-coordinated is ignored. Example: [[2, 2, 0], [0, 0, 0]]\n * @param {Array} lineSegment2 A nested Array containing x, y and optionally z.\n * The z-coordinated is ignored. Example: [[0, 0, 0], [2, 2, 0]]\n * @returns {Array} An Array containing the intersection or false if no intersection.\n * @example\n * const lineSegment1 = [[0, 0, 0], [2, 2, 0]];\n * const lineSegment2 = [[1, 2, 0], [3, 1, 0]];\n * console.log(intersect(lineSegment1, lineSegment2));\n * // output: [1.6666666666666667, 1.6666666666666667]\n */\n\nfunction intersect(l1, l2) {\n  if ( // Check if the two segments are equal.\n    l1[0][0] === l2[0][0] && l1[0][1] === l2[0][1] &&\n    l1[1][0] === l2[1][0] && l1[1][1] === l2[1][1]) {\n    return false;\n  }\n\n  if ( // Check if they intersect at first end.\n    (l1[0][0] === l2[0][0] && l1[0][1] === l2[0][1]) ||\n    (l1[0][0] === l2[1][0] && l1[0][1] === l2[1][1])) {\n    return [l1[0][0], l1[0][1]];\n  }\n\n  if ( // Check if they intersect at second end.\n    (l1[1][0] === l2[0][0] && l1[1][1] === l2[0][1]) ||\n    (l1[1][0] === l2[1][0] && l1[1][1] === l2[1][1])) {\n    return [l1[1][0], l1[1][1]];\n  }\n\n  const dx1 = l1[1][0] - l1[0][0];\n  const dy1 = l1[1][1] - l1[0][1];\n  const dx2 = l2[1][0] - l2[0][0];\n  const dy2 = l2[1][1] - l2[0][1];\n\n  const denom = (dy2 * dx1) - (dx2 * dy1);\n  if (denom === 0) { return false; }\n\n  const dx12 = l1[0][0] - l2[0][0];\n  const dy12 = l1[0][1] - l2[0][1];\n  const ua = ((dx2 * dy12) - (dy2 * dx12)) / denom;\n  const ub = ((dx1 * dy12) - (dy1 * dx12)) / denom;\n\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    return [l1[0][0] + (ua * dx1), l1[0][1] + (ua * dy1)];\n  }\n  return false;\n}\n\n// Very heavily inspired by: Paul Bourke: http://paulbourke.net/geometry/pointlineplane/\n/**\n * Find the intersection point between two lines located in 3D space.\n * If the boolean is passed returns true for intersection and false for no intersection.\n * @name intersect3D\n * @param {Array} lineSegment1 A nested Array containing x, y and z coordinates.\n * Example: [[2, 2, 0], [0, 0, 0]]\n * @param {Array} lineSegment2 A nested Array containing x, y and z coordinates.\n * Example: [[0, 0, 0], [2, 2, 0]]\n * @returns {Array} An Array containing the intersection or false if no intersection.\n * @example\n * const lineSegment1 = [[0, 0, 0], [2, 2, 0]];\n * const lineSegment2 = [[1, 2, 0], [3, 1, 0]];\n * console.log(intersect(lineSegment1, lineSegment2));\n * // output: [1.6666666666666667, 1.6666666666666667]\n */\nfunction intersect3D(ls1, ls2) {\n  const p1 = ls1[0];\n  const p2 = ls1[1];\n  const p3 = ls2[0];\n  const p4 = ls2[1];\n\n  if (\n    p1.length === 2 || p2.length === 2 ||\n    p3.length === 2 || p4.length === 2) {\n    return intersect(ls1, ls2);\n  }\n\n  if (p1[2] === p2[2] && p1[2] === p3[2] && p1[2] === p4[2]) {\n    const dx1 = p2[0] - p1[0];\n    const dx2 = p4[0] - p3[0];\n    const dy1 = p2[1] - p1[1];\n    const dy2 = p4[1] - p3[1];\n\n    const denom = (dy2 * dx1) - (dx2 * dy1);\n    if (denom === 0) { return false; }\n\n    const dx12 = p1[0] - p3[0];\n    const dy12 = p1[1] - p3[1];\n    const ua = ((dx2 * dy12) - (dy2 * dx12)) / denom;\n\n    return [\n      p1[0] + (ua * dx1),\n      p1[1] + (ua * dy1),\n      p1[2],\n    ];\n  }\n\n  const p13 = [(p1[0] - p3[0]), (p1[1] - p3[1]), (p1[2] - p3[2])];\n  const p43 = [(p4[0] - p3[0]), (p4[1] - p3[1]), (p4[2] - p3[2])];\n  const p43s = (p43[0] ** 2) + (p43[1] ** 2) + (p43[2] ** 2);\n\n  if (Math.sqrt(p43s) < Number.EPSILON) { return false; }\n\n  const p21 = [(p2[0] - p1[0]), (p2[1] - p1[1]), (p2[2] - p1[2])];\n  const p21s = (p21[0] ** 2) + (p21[1] ** 2) + (p21[2] ** 2);\n\n  if (Math.sqrt(p21s) < Number.EPSILON) { return false; }\n\n  const d1343 = (p13[0] * p43[0]) + (p13[1] * p43[1]) + (p13[2] * p43[2]);\n  const d4321 = (p43[0] * p21[0]) + (p43[1] * p21[1]) + (p43[2] * p21[2]);\n  const d1321 = (p13[0] * p21[0]) + (p13[1] * p21[1]) + (p13[2] * p21[2]);\n\n  const denom = (p21s * p43s) - (d4321 ** 2);\n\n  if (Math.abs(denom) < Number.EPSILON) { return false; }\n\n  const mua = ((d1343 * d4321) - (d1321 * p43s)) / denom;\n  const mub = (d1343 + (d4321 * (mua))) / p43s;\n\n  const l1 = [\n    (p1[0] + (mua * p21[0])),\n    (p1[1] + (mua * p21[1])),\n    (p1[2] + (mua * p21[2]))];\n\n  const l2 = [\n    (p3[0] + (mub * p43[0])),\n    (p3[1] + (mub * p43[1])),\n    (p3[2] + (mub * p43[2]))];\n\n  if (l1[0] === l2[0] && l1[1] === l2[1] && l1[2] === l2[2]) {\n    return l1;\n  }\n\n  return [l1, l2];\n}\n\n/**\n * Finds the distance between two points.\n * @name distanceTo\n * @param {Array} point1 An Array containing x, y and optionally z coordinates.\n * @param {Array} point2 An Array containing x, y and optionally z coordinates.\n * @returns {number} The distance between the points in map units.\n * @example\n * const point1 = [0, 0, 0];\n * const point2 = [2, 3, 1];\n * console.log(distanceTo(point1, point2));\n * // output: 3.7416573867739413\n */\nfunction distanceTo(point1, point2) {\n  const p1 = point1;\n  const p2 = point2;\n\n  if (p1.length === 3 && p2.length === 3) {\n    return Math.sqrt(\n      ((p2[0] - p1[0]) ** 2) +\n      ((p2[1] - p1[1]) ** 2) +\n      ((p2[2] - p1[2]) ** 2));\n  }\n  return Math.sqrt(\n    ((p2[0] - p1[0]) ** 2) +\n    ((p2[1] - p1[1]) ** 2));\n}\n\n/**\n * Finds the angle between two points. 0-360 system increasing clockwise with north being 0.\n * The z-coordinate is ignored.\n * @name angleTo\n * @param {Array} point1 An Array containing x, y and optionally z coordinates.\n * @param {Array} point2 An Array containing x, y and optionally z coordinates.\n * @returns {number} Angle between points.\n * @example\n * const point1 = [0, 0];\n * const point2 = [2, 2];\n * console.log(angle(point1, point2));\n * // output: 45 // now radians\n */\nfunction angleTo(point1, point2) {\n  const p1 = point1;\n  const p2 = point2;\n\n  if (p1[0] === p2[0] && p1[1] === p2[1]) { return false; }\n  let theta = Math.atan2(p1[0] - p2[0], p2[1] - p1[1]);\n  if (theta < 0) { theta += Math.PI * 2; }\n\n  return theta;\n}\n\nfunction onLine(line, point, tolerance = Number.EPSILON) {\n  const dy = line[1][1] - line[0][1];\n  const dx = line[1][0] - line[0][0];\n  if (dx === 0 || dy === 0) { // vertical line\n    if (point[0] === line[0][0]) {\n      let ymin; let ymax;\n      if (line[0][1] >= line[1][1]) {\n        ymin = line[1][1];\n        ymax = line[0][1];\n      } else {\n        ymin = line[0][1];\n        ymax = line[1][1];\n      }\n      if (point[1] >= ymin && point[1] <= ymax) { return true; }\n    } else if (point[1] === line[0][1]) { // horisontal line\n      let xmin; let xmax;\n      if (line[0][0] >= line[1][0]) {\n        xmin = line[1][0];\n        xmax = line[0][0];\n      } else {\n        xmin = line[0][0];\n        xmax = line[1][0];\n      }\n      if (point[0] >= xmin && point[0] <= xmax) { return true; }\n    }\n    return false;\n  }\n  const slope = dy / dx;\n  const intercept = line[0][1] - (slope * line[0][0]);\n  const on = Math.abs(point[1] - ((slope * point[0]) + intercept));\n  return (on <= tolerance) === 1;\n}\n\n/**\n * Creates a new point from the angle between two points and a provided distance.\n * @name pointFromTwoPoints\n * @param {Array} point1 An Array containing x, y and optionally z coordinates.\n * @param {Array} point2 An Array containing x, y and optionally z coordinates.\n * @param {number} [distance = 0] distance The distance to the new point.\n * Can be higher than distance between the two points.\n * @returns {Array} An Array containing x, y and potentially z coordinates.\n * @example\n * const point1 = [0, 0, 0];\n * const point2 = [2, 2, 2];\n * console.log(pointFromTwoPoints(point1, point2, Math.sqrt(3)));\n * // output: [1, 1, 1]\n */\nfunction pointFromTwoPoints(point1, point2, distance = 0) {\n  if (distance === 0) { return point1; }\n\n  const p1 = point1;\n  const p2 = point2;\n  const dx = (p2[0] - p1[0]);\n  const dy = (p2[1] - p1[1]);\n  const xy = (dx ** 2) + (dy ** 2);\n  let m;\n\n  if (p1.length === 2 || p2.length === 2) {\n    m = Math.sqrt(xy);\n    return [\n      p1[0] + ((dx / m) * distance),\n      p1[1] + ((dy / m) * distance),\n    ];\n  }\n\n  m = Math.sqrt(xy + ((point2[2] - point1[2]) ** 2));\n  return [\n    p1[0] + ((dx / m) * distance),\n    p1[1] + ((dy / m) * distance),\n    p1[2] + (((p2[2] - p1[2]) / m) * distance),\n  ];\n}\n\n/**\n * Finds a point at ratio distance between two points.\n * @name pointFromRatio\n * @param {Array} point1 An Array containing x, y and optionally z coordinates.\n * @param {Array} point2 An Array containing x, y and optionally z coordinates.\n * @param {number} ratio A number between 0 - 1;\n * @returns {Array} A point located at the ratio.\n * @example\n * const point1 = [0, 0, 0];\n * const point2 = [2, 2, 2];\n * console.log(pointFromRatio(point1, point2, 0.5));\n * // output: [1, 1, 1]\n */\nfunction pointFromRatio(point1, point2, ratio) {\n  if (ratio === 0) { return point1; }\n  if (ratio === 1) { return point2; }\n\n  const p1 = point1;\n  const p2 = point2;\n  const r = ratio;\n  const dx = (p2[0] - p1[0]);\n  const dy = (p2[1] - p1[1]);\n\n  if (p1.length === 2 || p2.length === 2) {\n    return [\n      p1[0] + (dx * r),\n      p1[1] + (dy * r),\n    ];\n  }\n\n  return [\n    p1[0] + (dx * r),\n    p1[1] + (dy * r),\n    p1[2] + ((p2[2] - p1[2]) * r),\n  ];\n}\n\n/**\n * Creates a new point given a point an angle and a distance.\n * 0-360 system increasing clockwise with north being 0.\n * @name pointFromAngle\n * @param {Array} point1 An Array containing x, y and optionally z coordinates.\n * @param {number} distance The distance to the new point.\n * @param {number} angle A number representing an angle in radians.\n  North is 0 and it increases clockwise.\n * @returns {Array} An Array containing x, y and potentially z coordinates.\n * @example\n * const point = [0, 0, 0];\n * const angle = 45;\n * const distance = Math.sqrt(2);\n * console.log(pointFromAngle(point, angle, Math.sqrt(2)));\n * // output: [1, 1, 0]\n */\nfunction pointFromAngle(point, angle, distance = 0) {\n  const p = point;\n  const a = angle;\n  if (p.length === 3) {\n    return [\n      (Math.cos(a) * distance) + p[0],\n      (Math.sin(a) * distance) + p[1],\n      p[2],\n    ];\n  }\n  return [\n    (Math.cos(a) * distance) + point[0],\n    (Math.sin(a) * distance) + point[1],\n  ];\n}\n\n/**\n * Finds the smallest difference between two angles.\n * @name angleDifference\n * @param {number} angle1 A number representing an angle between 0-360;\n * @param {number} angle2 A number representing an angle between 0-360;\n * @returns {number} The smallest difference between the two\n * @example\n * const angle1 = 270\n * const angle2 = 10\n * console.log(angleDifference(angle1, angle2));\n * // output: 100\n */\nfunction angleDifference(angle1, angle2) {\n  return Math.min(\n    (2 * Math.PI) - Math.abs(angle1 - angle2),\n    Math.abs(angle1 - angle2),\n  );\n}\n\n/**\n * Rotate a point around the z-axis and a custom origin\n * @name pointRotation\n * @param {Array} origin An Array containing x, y and optionally z coordinates.\n * @param {Array} point An Array containing x, y and optionally z coordinates.\n * @param {number} angle A number representing an angle between 0-360;\n * @returns {Array} A new point rotate according to the provided angle around origin.\n * @example\n * const origin = [0, 0];\n * const point = [0, 2, 1];\n * const angle = 90;\n * console.log(pointRotation(origin, point, angle));\n * // output: [2, 0, 1]\n */\nfunction pointRotation(origin, point, angle) {\n  const o = origin;\n  const p = point;\n  const rad = (angle * Math.PI) / 180;\n  const cos = Math.cos(rad);\n  const sin = Math.sin(rad);\n\n  const nx =\n    ((cos * (p[0] - o[0])) +\n    (sin * (p[1] - o[1]))) + o[0];\n\n  const ny =\n    ((cos * (p[1] - p[1])) -\n    (sin * (p[0] - p[0]))) + o[1];\n\n  if (p.length === 3) { return [nx, ny, p[2]]; }\n\n  return [nx, ny];\n}\n\n/**\n * Finds the nearest point on a lineSegment from a point.\n * Will do the calculation in 3D if provided 3D coordinates.\n * @name nearestPoint\n * @param {Array} point An Array containing x, y and optionally z coordinates.\n * @param {Array} lineSegment A nested Array containing x, y and optionally z.\n * Example: [[0, 0, 0], [2, 2, 0]]\n * @returns {Array} The nearest point on the lineSegment.\n * @example\n * const point = [3, 2, 0];\n * const lineSegment = [[2, 2, 1], [4, 2, 2]];\n * console.log(nearestPoint(point, lineSegment);\n * // output: [2.5, 2, 0.5]\n */\nfunction nearestPoint(point, lineSegment) {\n  const p = point;\n  const l = lineSegment;\n  const dlx = l[1][0] - l[0][0];\n  const dly = l[1][1] - l[0][1];\n  const dpx = p[0] - l[0][0];\n  const dpy = p[1] - l[0][1];\n  let c1;\n  let c2;\n  let b;\n  let s;\n\n  if (p.length === 2 || l[0].length === 2 || l[1].length === 2) {\n    c1 = (dlx * dpx) + (dly * dpy);\n    if (c1 <= 0) { return l[0]; }\n\n    c2 = (dlx ** 2) + (dly ** 2);\n    if (c2 <= c1) { return l[1]; }\n\n    b = c1 / c2;\n    s = [dlx * b, dly * b];\n\n    return [l[0][0] + s[0], l[0][1] + s[1]];\n  }\n\n  const dlz = l[1][2] - l[0][2];\n  const dpz = p[2] - l[0][2];\n\n  c1 = (dlx * dpx) + (dly * dpy) + (dlz * dpz);\n  if (c1 <= 0) { return l[0]; }\n\n  c2 = (dlx ** 2) + (dly ** 2) + (dlz ** 2);\n  if (c2 <= c1) { return l[1]; }\n\n  b = c1 / c2;\n  s = [dlx * b, dly * b, dlz * b];\n\n  return [l[0][0] + s[0], l[0][1] + s[1], l[0][2] + s[2]];\n}\n\n/**\n * Calculates the area of a simple polygon. Does not work for complex polygons.\n * @name area\n * @param {Array} polygon An array containing x, y and optionally z coordinates.\n * @returns {number} The distance between the points in map units.\n * @example\n * const polygon = [[0,0], [0,2], [2,2], [2,0], [0,0]];\n * console.log(area(polygon));\n * // output: 4\n */\nfunction area(polygon) {\n  const a = polygon;\n  let total = 0;\n\n  for (let i = 0; i < a.length - 1; i += 1) {\n    const j = (i === a.length - 1) ? 0 : i + 1;\n    total += (a[i][0] * a[j][1]) - (a[j][0] * a[i][1]);\n  }\n\n  return Math.abs(total) / 2;\n}\n\n/**\n * Calculates the bounding box of a polygon. ([Xmin, Ymin, Xmax, Ymax])\n * @name bbox\n * @param {Array} polygon An array containing x, y and optionally z coordinates.\n * @returns {number} The distance between the points in map units.\n * @example\n * const polygon = [[0,0], [0,3], [2,2], [1,0], [0,0]];\n * console.log(bbox(polygon));\n * // output: [0, 0, 2, 3]\n */\nfunction bbox(polygon) {\n  const a = polygon;\n  const b = [Infinity, Infinity, -Infinity, -Infinity];\n  for (let i = 0; i < a.length - 1; i += 1) {\n    if (b[0] > a[i][0]) b[0] = a[i][0];\n    if (b[1] > a[i][1]) b[1] = a[i][1];\n    if (b[2] < a[i][0]) b[2] = a[i][0];\n    if (b[3] < a[i][1]) b[3] = a[i][1];\n  }\n  return b;\n}\n\nmodule.exports = {\n  intersect,\n  intersect3D,\n  distanceTo,\n  onLine,\n  bbox,\n  area,\n  angleTo,\n  nearestPoint,\n  pointRotation,\n  angleDifference,\n  pointFromAngle,\n  pointFromRatio,\n  pointFromTwoPoints,\n};\n","/* eslint-env node, es6  */\nfunction createSectorSlice(point, b1, b2, distance, precision = 24) {\n  const ad = Math.min(\n    (2 * Math.PI) - Math.abs(b1 - b2), Math.abs(b1 - b2));\n  const nodes = Math.ceil(ad / (Math.PI * 2) / precision);\n  const rads = ad / (nodes + 1);\n\n  const cl = nodes + 2;\n  const coords = Array(cl);\n  coords[0] = [\n    (Math.cos(b1) * distance) + point[0],\n    (Math.sin(b1) * distance) + point[1],\n  ];\n  coords[cl - 1] = [\n    (Math.cos(b2) * distance) + point[0],\n    (Math.sin(b2) * distance) + point[1],\n  ];\n\n  for (let i = 1; i + 1 < cl; i += 1) {\n    const a = b1 + (rads * i);\n    coords[i] = [\n      (Math.cos(a) * distance) + point[0],\n      (Math.sin(a) * distance) + point[1],\n    ];\n  }\n\n  return coords;\n}\n\nfunction createSector(point, b1, b2, distance, precision = 24) {\n  const ad = Math.min(\n    (2 * Math.PI) - Math.abs(b1 - b2), Math.abs(b1 - b2));\n  const nodes = Math.ceil(ad / (Math.PI * 2) / precision);\n  const rads = ad / (nodes + 1);\n\n  const cl = nodes + 4;\n  const coords = Array(cl);\n  coords[0] = point;\n  coords[1] = [\n    (Math.cos(b1) * distance) + point[0],\n    (Math.sin(b1) * distance) + point[1],\n  ];\n  coords[cl - 2] = [\n    (Math.cos(b2) * distance) + point[0],\n    (Math.sin(b2) * distance) + point[1],\n  ];\n  coords[cl - 1] = point;\n\n  let t = 1;\n  for (let i = 2; i + 2 < cl; i += 1) {\n    const a = b1 + (rads * t);\n    coords[i] = [\n      (Math.cos(a) * distance) + point[0],\n      (Math.sin(a) * distance) + point[1],\n    ];\n    t += 1;\n  }\n\n  return coords;\n}\n\nfunction createCircle(point, radius, precision = 24) {\n  const coords = Array(precision + 1);\n  for (let i = 0; i < precision; i += 1) {\n    const angle = (i / (precision / 2)) * Math.PI;\n    const x = point[0] - (radius * Math.cos(angle));\n    const y = point[1] - (radius * Math.sin(angle));\n    coords[i] = [x, y];\n  }\n  coords[coords.length - 1] = point;\n  return coords;\n}\n\nmodule.exports = {\n  createSector,\n  createSectorSlice,\n  createCircle,\n};\n","/* eslint-env node, es6 */\nconst base = require('./base');\n\n// LENGTH OF LINE (3D)\nconst lineStringLength = (lineString) => {\n  const ls = lineString;\n  let length = 0;\n  for (let i = 0; i < ls.length - 1; i += 1) {\n    length += base.distance(ls[i], ls[i + 1]);\n  }\n  return length;\n};\n\nconst pointAlongLineString = (lineString, distance = 0) => {\n  if (distance === 0) { return lineString[0]; }\n\n  const ls = lineString;\n  const d = distance;\n\n  let a = 0;\n  for (let i = 0; i < ls.length - 1; i += 1) {\n    a += base.distance(ls[i], ls[i + 1]);\n    if (a === d) { return ls[i + 1]; }\n    if (a > d) {\n      return base.pointFromTwoPoints(ls[i + 1], ls[i], a - d);\n    }\n  }\n\n  throw new Error('Distance outside of line.');\n};\n\nconst perpendicularPoints = (line, lineDistance, distance) => {\n  const origin = base.pointFromTwoPoints(\n    line[0],\n    line[1],\n    lineDistance,\n  );\n  const left = base.pointFromAngle(\n    origin,\n    distance,\n    base.angleTo(line[0], line[1]) - (0.5 * Math.PI),\n  );\n  const right = [\n    left[0] + ((-1) * (origin[0] - left[0])),\n    left[1] + ((-1) * (origin[1] - left[1])),\n  ];\n\n  return [left, right];\n};\n\nconst shiftLines = (line, distance) => {\n  const ls = base.pointFromAngle(\n    line[0],\n    distance,\n    base.angleTo(line[0], line[1]) - (0.5 * Math.PI),\n  );\n  const tv = [line[0][0] - ls[0], line[0][1] - ls[1]];\n  const tvi = [tv[0] * -1, tv[1] * -1];\n\n  const le = [line[1][0] + tv[0], line[1][1] + tv[1]];\n  const rs = [ls[0] + tvi[0], ls[1] + tvi[1]];\n  const re = [le[0] + tvi[0], le[1] + tvi[1]];\n\n  return [[ls, le], [rs, re]];\n};\n\nconst shiftLeft = (line, distance) => {\n  const ls = base.pointFromAngle(\n    line[0],\n    distance,\n    base.angleTo(line[0], line[1]) - (0.5 * Math.PI),\n  );\n  const tv = [line[0][0] - ls[0], line[0][1] - ls[1]];\n  const le = [line[1][0] + tv[0], line[1][1] + tv[1]];\n\n  return [ls, le];\n};\n\nconst shiftRight = (line, distance) => {\n  const rs = base.pointFromAngle(\n    line[0],\n    distance,\n    base.angleTo(line[0], line[1]) + (0.5 * Math.PI),\n  );\n  const tv = [line[0][0] - rs[0], line[0][1] - rs[1]];\n  const re = [line[1][0] + tv[0], line[1][1] + tv[1]];\n\n  return [rs, re];\n};\n\nmodule.exports = {\n  lineStringLength,\n  pointAlongLineString,\n  perpendicularPoints,\n  shiftLines,\n  shiftLeft,\n  shiftRight,\n};\n","/* eslint-env node, es6, browser */\n\nconst base = require('./core/base');\nconst checks = require('./core/checks');\nconst circles = require('./core/circles');\nconst lineStrings = require('./core/lineStrings');\nconst buffer = require('./operations/buffer');\nconst selfIntersection = require('./operations/selfIntersection');\n\nconst farn = {\n  ...base,\n  ...checks,\n  ...circles,\n  ...lineStrings,\n  ...buffer,\n  ...selfIntersection,\n};\n\n// if (window) { window.farn = farn; }\nmodule.exports = farn;\n\n/*\n  TODO:\n    - Add translations both rigid and non-rigid.\n    - Add more comments to the code + references.\n    - Add documentation to other files.\n    - Finish buffer and dissolve (remember mitter, round ...)\n*/\n","/* eslint-env node, es6 */\nconst base = require('./base');\n\n// IS A POINT INSIDE A POLYGON\nconst inside = (point, polygon, precision) => {\n  const x = point[0];\n  const y = point[1];\n\n  for (let i = 0; i < polygon.length; i += 1) {\n    const j = (i > 0) ? i - 1 : polygon.length - 1;\n    const xi = polygon[i][0];\n    const yi = polygon[i][1];\n    const xj = polygon[j][0];\n    const yj = polygon[j][1];\n\n    if (point[0] === polygon[i][0] && point[1] === polygon[i][1]) {\n      return true;\n    }\n\n    const isIntersecting =\n      ((yi > y) !== (yj > y)) &&\n      ((x < (xj - xi) * (y - yi)) / ((yj - yi) + xi));\n\n    if (isIntersecting) { return true; }\n\n    if (\n      precision &&\n      polygon[i + 1] &&\n      base.pointToLine(point, [polygon[i], polygon[i + 1]], true) < precision\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  inside,\n};\n","/* eslint-env node, es6 */\nconst base = require('../core/base');\nconst linestring = require('../core/lineStrings');\nconst circle = require('../core/circles');\n\nconst bufferLine = (line, distance, precision) => {\n  if (distance < 0) { return false; }\n\n  let left = [];\n  let right = [];\n\n  for (let i = 0; i < line.length - 1; i += 1) {\n    const currentShiftLines = linestring.shiftLines([line[i], line[i + 1]], distance);\n    const currLeft = currentShiftLines[0];\n    const currRight = currentShiftLines[1];\n\n    if (i < line.length - 2) {\n      if (i === 0) { left.push(currLeft[0]); }\n      const forwardShiftLines = linestring.shiftLines([line[i + 1], line[i + 2]], distance);\n      const forwardLeft = forwardShiftLines[0];\n      const forwardRight = forwardShiftLines[1];\n\n      const leftIntersect = base.intersect(currLeft, forwardLeft);\n      const rightIntersect = base.intersect(currRight, forwardRight);\n\n      if (leftIntersect) {\n        left.push(currLeft[0]);\n        left.push(leftIntersect);\n      } else {\n        const b1 = base.angleTo(line[i + 1], currLeft[1]);\n        const b2 = base.angleTo(line[i + 1], forwardLeft[0]);\n        const slice = circle.createSectorSlice(\n          line[i + 1], b1, b2, distance, precision);\n        left = left.concat(slice);\n      }\n\n      if (rightIntersect) {\n        right.unshift(currRight[0]);\n        right.unshift(rightIntersect);\n      } else {\n        const b1 = base.angleTo(line[i + 1], forwardRight[0]);\n        const b2 = base.angleTo(line[i + 1], currRight[1]);\n        const slice = circle.createSectorSlice(\n          line[i + 1], b1, b2, distance, precision);\n        right = slice.concat(right);\n      }\n    }\n    if (i === line.length - 2) {\n      const shiftLines = linestring.shiftLines([line[i], line[i + 1]], distance);\n      left.push(shiftLines[1][1]);\n      right.push(shiftLines[0][1]);\n    }\n  }\n  return left.concat(right);\n};\n\nmodule.exports = bufferLine;\n","/* eslint-env node, es6 */\nfunction selfIntersection(polygon, shamos = false) {\n  let globalIntersections = [];\n\n  const seg = Array(polygon.length - 1);\n  for (let i = 0; i < polygon.length - 1; i += 1) {\n    const c = { a: polygon[i], x: polygon[i][0], y: polygon[i][1] };\n    const f = { a: polygon[i + 1], x: polygon[i + 1][0], y: polygon[i + 1][1] };\n\n    if (c.x < f.x) {\n      seg[i] = [c.a, f.a];\n    } else if (c.x === f.x) {\n      if (c.y <= f.y) { seg[i] = [c.a, f.a]; } else { seg[i] = [f.a, c.a]; }\n    } else {\n      seg[i] = [f.a, c.a];\n    }\n  }\n\n  function sortCoords(q, p) { return (q[0][0] > p[0][0]) ? 1 : -1; }\n  function sortIntersections(q, p) {\n    if (q[0] >= p[0] || (q[0] === p[0] && q[1] >= p[1])) { return 1; }\n    return -1;\n  }\n  seg.sort(sortCoords);\n\n  while (seg.length > 1) {\n    const localIntersections = [];\n    for (let j = 1; j < seg.length; j += 1) {\n      const c = {\n        p1: { x: seg[0][0][0], y: seg[0][0][1] },\n        p2: { x: seg[0][1][0], y: seg[0][1][1] },\n      };\n\n      const f = {\n        p1: { x: seg[j][0][0], y: seg[j][0][1] },\n        p2: { x: seg[j][1][0], y: seg[j][1][1] },\n      };\n\n      if (f.p1.x > c.p2.x) { break; } // outside x\n      const eq1 = c.p1.x === f.p1.x && c.p1.y === f.p1.y;\n      const eq2 = c.p2.x === f.p2.x && c.p2.y === f.p2.y;\n      if (eq1 && eq2) {\n        localIntersections.push(seg[0]); // push the equal line string.\n      } else if (\n        !eq1 && !(c.p1.x === f.p2.x && c.p1.y === f.p2.y) &&\n        !eq2 && !(c.p2.x === f.p1.x && c.p2.y === f.p1.y)\n      ) {\n        const dx1 = c.p2.x - c.p1.x;\n        const dy1 = c.p2.y - c.p1.y;\n        const dx2 = f.p2.x - f.p1.x;\n        const dy2 = f.p2.y - f.p1.y;\n        const denom = (dy2 * dx1) - (dx2 * dy1);\n\n        if (denom !== 0) {\n          const dx12 = c.p1.x - f.p1.x;\n          const dy12 = c.p1.y - f.p1.y;\n          const ua = ((dx2 * dy12) - (dy2 * dx12)) / denom;\n          const ub = ((dx1 * dy12) - (dy1 * dx12)) / denom;\n\n          if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n            if (shamos) { return true; }\n            const nx = c.p1.x + (ua * dx1);\n            const ny = c.p1.y + (ua * dy1);\n\n            // Check if it is in local intersections before going global.\n            const found = localIntersections.findIndex(\n              arr => arr[0] === nx && arr[1] === ny);\n\n            if (found === -1) { localIntersections.push([nx, ny]); }\n          }\n        }\n      }\n    }\n    globalIntersections = globalIntersections.concat(localIntersections);\n    seg.shift();\n  }\n\n  return (globalIntersections.length > 0) ?\n    globalIntersections.sort(sortIntersections) : false;\n}\n\nmodule.exports = selfIntersection;\n"],"sourceRoot":""}